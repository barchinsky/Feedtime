plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "com.google.protobuf" version "0.8.17"
    id "androidx.navigation.safeargs"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.borchik.feedtime"
        minSdk 29
        targetSdk 31
        versionCode 9
        versionName "1.5.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(getKeystoreValues("storeFile"))
            storePassword getKeystoreValues("storePassword")
            keyAlias getKeystoreValues("keyAlias")
            keyPassword getKeystoreValues("keyPassword")
            enableV3Signing true
            enableV4Signing true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
    buildFeatures {
        dataBinding = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appId = variant.applicationId// com.exampleFree.app OR com.examplePaid.app
            def versionName = variant.versionName
            def versionCode = variant.versionCode // e.g 1.0
            def flavorName = variant.flavorName // e. g. Free
            def buildType = variant.buildType.name // e. g. debug
            def variantName = "feedtime-${versionName}-${versionCode}-${buildType}" // e. g. FreeDebug

            //customize your app name by using variables
            outputFileName = "${variantName}.apk"
        }
    }
}

def getKeystoreValues(key) {
    def properties = new Properties()
    def keystoreProps = project.rootProject.file("keystore.properties")
    if (keystoreProps.exists()) {
        properties.load(keystoreProps.newDataInputStream())
    }

    return properties.getProperty(key) ?: ""
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.0"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.0'
    // Coroutines
    def coroutines = "1.6.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Koin
    implementation "io.insert-koin:koin-android:3.1.2"

    def roomVersion = "2.4.2"

    implementation("androidx.room:room-runtime:$roomVersion")
    annotationProcessor("androidx.room:room-compiler:$roomVersion")

    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$roomVersion")

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$roomVersion")

    // SwipeRefreshLayout
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}